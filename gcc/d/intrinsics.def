// intrinsics.def -- D frontend for GCC.
// Copyright (C) 2014 Free Software Foundation, Inc.

// GCC is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 3, or (at your option) any later
// version.

// GCC is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.

// You should have received a copy of the GNU General Public License
// along with GCC; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

// Definitions for intrinsics of the D compiler.

// Define all D intrinsic functions.
// The first parameter:
//  CODE - The enum code used to refer this intrinsic.
// The second parameter:
//  ALIAS - The enum code used to refer the function DECL_FUNCTION_CODE,
//  if there are multiple modules or decos for a single intrinsic, they
//  would all refer to this code.
// The third parameter:
//  NAME - The name of the intrinsic.
// The fourth parameter:
//  MODULE - The list of modules which the intrinsic could belong to.
// The fifth parameter:
//  DECO - the signature decoration of the intrinsic.
//  Template intrinsics reserve this for the template parameter strings.

// Helper macros.

// Modules
#define CORE_BITOP      "core.bitop"
#define CORE_VARARG     "core.stdc.stdarg"
#define CORE_MATH	"core.math"
#define STD_MATH	"std.math"

// Signature decorations
#define FN_SAFE_PURE_NOTHROW	"FNaNbNf"   // @safe pure nothrow function
#define FN_PURE_NOTHROW		"FNaNb"	    // @system pure nothrow function
#define FN_NONE			NULL

// Parameter and return types
#define INT_UINT		"kZi"	    // int(uint)
#define INT_ULONG		"mZi"	    // int(ulong)
#define UINT_UINT		"kZk"	    // uint(uint)
#define INT_PTR_UINT_UINT	"PkkZi"	    // int(uint*, uint)
#define INT_PTR_ULONG_ULONG	"PmmZi"	    // int(ulong*, ulong)
#define REAL_REAL		"eZe"	    // real(real)
#define REAL_REAL_INT		"eiZe"	    // real(real, int)
#define LONG_REAL		"eZl"	    // long(real)
#define FLOAT_FLOAT		"fZf"	    // float(float)
#define DOUBLE_DOUBLE		"dZd"	    // double(double)

#define SAFE_PURE_NOTHROW_INT_UINT	    FN_SAFE_PURE_NOTHROW INT_UINT
#define SAFE_PURE_NOTHROW_INT_ULONG	    FN_SAFE_PURE_NOTHROW INT_ULONG
#define SAFE_PURE_NOTHROW_UINT_UINT	    FN_SAFE_PURE_NOTHROW UINT_UINT
#define SAFE_PURE_NOTHROW_LONG_REAL	    FN_SAFE_PURE_NOTHROW LONG_REAL
#define SAFE_PURE_NOTHROW_FLOAT_FLOAT	    FN_SAFE_PURE_NOTHROW FLOAT_FLOAT
#define SAFE_PURE_NOTHROW_DOUBLE_DOUBLE	    FN_SAFE_PURE_NOTHROW DOUBLE_DOUBLE
#define SAFE_PURE_NOTHROW_REAL_REAL	    FN_SAFE_PURE_NOTHROW REAL_REAL
#define SAFE_PURE_NOTHROW_REAL_REAL_INT	    FN_SAFE_PURE_NOTHROW REAL_REAL_INT
#define PURE_NOTHROW_INT_PTR_UINT_UINT	    FN_PURE_NOTHROW INT_PTR_UINT_UINT
#define PURE_NOTHROW_INT_PTR_ULONG_ULONG    FN_PURE_NOTHROW INT_PTR_ULONG_ULONG
#define DECO_NONE			    FN_NONE

// core.bitop intrinsics

DEF_D_INTRINSIC (BSF, BSF, "bsf", CORE_BITOP, SAFE_PURE_NOTHROW_INT_UINT)
DEF_D_INTRINSIC (BSR, BSR, "bsr", CORE_BITOP, SAFE_PURE_NOTHROW_INT_UINT)
DEF_D_INTRINSIC (BTC, BTC, "btc", CORE_BITOP, PURE_NOTHROW_INT_PTR_UINT_UINT)
DEF_D_INTRINSIC (BTR, BTR, "btr", CORE_BITOP, PURE_NOTHROW_INT_PTR_UINT_UINT)
DEF_D_INTRINSIC (BTS, BTS, "bts", CORE_BITOP, PURE_NOTHROW_INT_PTR_UINT_UINT)
DEF_D_INTRINSIC (BSF64, BSF, "bsf", CORE_BITOP, SAFE_PURE_NOTHROW_INT_ULONG)
DEF_D_INTRINSIC (BSR64, BSR, "bsr", CORE_BITOP, SAFE_PURE_NOTHROW_INT_ULONG)
DEF_D_INTRINSIC (BTC64, BTC, "btc", CORE_BITOP, PURE_NOTHROW_INT_PTR_ULONG_ULONG)
DEF_D_INTRINSIC (BTR64, BTR, "btr", CORE_BITOP, PURE_NOTHROW_INT_PTR_ULONG_ULONG)
DEF_D_INTRINSIC (BTS64, BTS, "bts", CORE_BITOP, PURE_NOTHROW_INT_PTR_ULONG_ULONG)
DEF_D_INTRINSIC (BSWAP, BSWAP, "bswap", CORE_BITOP, SAFE_PURE_NOTHROW_UINT_UINT)

// core.math intrinsics

DEF_D_INTRINSIC (COS, COS, "cos", CORE_MATH, SAFE_PURE_NOTHROW_REAL_REAL)
DEF_D_INTRINSIC (FABS, FABS, "fabs", CORE_MATH, SAFE_PURE_NOTHROW_REAL_REAL)
DEF_D_INTRINSIC (LDEXP, LDEXP, "ldexp", CORE_MATH, SAFE_PURE_NOTHROW_REAL_REAL_INT)
DEF_D_INTRINSIC (RINT, RINT, "rint", CORE_MATH, SAFE_PURE_NOTHROW_REAL_REAL)
DEF_D_INTRINSIC (RNDTOL, RNDTOL, "rndtol", CORE_MATH, SAFE_PURE_NOTHROW_LONG_REAL)
DEF_D_INTRINSIC (SIN, SIN, "sin", CORE_MATH, SAFE_PURE_NOTHROW_REAL_REAL)
DEF_D_INTRINSIC (SQRTF, SQRTF, "sqrt", CORE_MATH, SAFE_PURE_NOTHROW_FLOAT_FLOAT)
DEF_D_INTRINSIC (SQRT, SQRT, "sqrt", CORE_MATH, SAFE_PURE_NOTHROW_DOUBLE_DOUBLE)
DEF_D_INTRINSIC (SQRTL, SQRTL, "sqrt", CORE_MATH, SAFE_PURE_NOTHROW_REAL_REAL)

// std.math intrinsics

DEF_D_INTRINSIC (STD_COS, COS, "cos", STD_MATH, SAFE_PURE_NOTHROW_REAL_REAL)
DEF_D_INTRINSIC (STD_FABS, FABS, "fabs", STD_MATH, SAFE_PURE_NOTHROW_REAL_REAL)
DEF_D_INTRINSIC (STD_LDEXP, LDEXP, "ldexp", STD_MATH, SAFE_PURE_NOTHROW_REAL_REAL_INT)
DEF_D_INTRINSIC (STD_RINT, RINT, "rint", STD_MATH, SAFE_PURE_NOTHROW_REAL_REAL)
DEF_D_INTRINSIC (STD_RNDTOL, RNDTOL, "rndtol", STD_MATH, SAFE_PURE_NOTHROW_LONG_REAL)
DEF_D_INTRINSIC (STD_SIN, SIN, "sin", STD_MATH, SAFE_PURE_NOTHROW_REAL_REAL)
DEF_D_INTRINSIC (STD_SQRTF, SQRTF, "sqrt", STD_MATH, SAFE_PURE_NOTHROW_FLOAT_FLOAT)
DEF_D_INTRINSIC (STD_SQRT, SQRT, "sqrt", STD_MATH, SAFE_PURE_NOTHROW_DOUBLE_DOUBLE)
DEF_D_INTRINSIC (STD_SQRTL, SQRTL, "sqrt", STD_MATH, SAFE_PURE_NOTHROW_REAL_REAL)

// core.stdc.stdarg intrinsics

DEF_D_INTRINSIC (VA_ARG, VA_ARG, "va_arg", CORE_VARARG, "void(ref va_list ap, ref T parmn)")
DEF_D_INTRINSIC (C_VA_ARG, C_VA_ARG, "va_arg", CORE_VARARG, "T(ref va_list ap)")
DEF_D_INTRINSIC (VASTART, VASTART, "va_start", CORE_VARARG, "void(out va_list ap, ref T parmn)")


// Remove helper macros
#undef DEF_D_INTRINSIC
#undef CORE_BITOP
#undef CORE_VARARG
#undef CORE_MATH
#undef STD_MATH
#undef FN_SAFE_PURE_NOTHROW
#undef FN_PURE_NOTHROW
#undef FN_NONE
#undef INT_UINT
#undef INT_ULONG
#undef UINT_UINT
#undef INT_PTR_UINT_UINT
#undef INT_PTR_ULONG_ULONG
#undef REAL_REAL
#undef REAL_REAL_INT
#undef LONG_REAL
#undef FLOAT_FLOAT
#undef DOUBLE_DOUBLE
#undef SAFE_PURE_NOTHROW_INT_UINT
#undef SAFE_PURE_NOTHROW_INT_ULONG
#undef SAFE_PURE_NOTHROW_UINT_UINT
#undef SAFE_PURE_NOTHROW_LONG_REAL
#undef SAFE_PURE_NOTHROW_FLOAT_FLOAT
#undef SAFE_PURE_NOTHROW_DOUBLE_DOUBLE
#undef SAFE_PURE_NOTHROW_REAL_REAL
#undef SAFE_PURE_NOTHROW_REAL_REAL_INT
#undef PURE_NOTHROW_INT_PTR_UINT_UINT
#undef PURE_NOTHROW_INT_PTR_ULONG_ULONG

#undef DECO_NONE

